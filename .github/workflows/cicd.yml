name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Tests
        run: npm test -- --passWithNoTests

      - name: Dependency Audit
        run: npm audit --audit-level=high

      - name: Build Docker Image
        run: docker build -t mydev:${{ github.sha }} .

      - name: Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: mydev:${{ github.sha }}

      - name: Push to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          IMAGE_NAME=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/mydev
          docker tag mydev:${{ github.sha }} $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:${{ github.sha }}
          docker tag mydev:${{ github.sha }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-test-scan
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Trigger Render Staging Deploy
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE }}/deploys" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-test-scan
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Trigger Render Production Deploy
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID_PROD }}/deploys" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"

  sentry-release:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-prod]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create and Finalize Sentry Release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          version: ${{ github.sha }}
          environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          finalize: true
          set_commits: auto

      - name: Mark Release as Deployed
        run: |
          ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          VERSION=${{ github.sha }}
          curl https://sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/$VERSION/deploys/ \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H 'Content-Type: application/json' \
            -d "{\"environment\":\"$ENVIRONMENT\"}"


  notify:
    runs-on: ubuntu-latest
    needs: [build-test-scan, deploy-staging, deploy-prod, sentry-release]
    if: always()
    steps:
      - name: Slack Notification for Staging
        if: github.ref == 'refs/heads/develop'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: Wizfi-Pipeline
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Staging Deployment Status"
          SLACK_MESSAGE: |
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Status: ${{ job.status }}
            Environment: Staging
            Release: ${{ github.sha }}

      - name: Slack Notification for Production
        if: github.ref == 'refs/heads/main'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: Wizfi-Pipeline
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Production Deployment Status"
          SLACK_MESSAGE: |
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Status: ${{ job.status }}
            Environment: Production
            Release: ${{ github.sha }}
